name: Monitoring and Health Checks

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
  push:
    paths:
      - 'cloudflare-chain/**'
      - 'pages-frontend/**'

permissions:
  contents: read
  actions: write
  checks: write

env:
  CREATOR_UID: "ALC-ROOT-1010-1111-XCOV‚àû"
  CREATOR_EMAIL: "allcatch37@gmail.com"
  ALERT_EMAIL: "allcatch37@gmail.com"

jobs:
  infrastructure-health:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Repository Health
        id: repo-health
        run: |
          echo "=== Repository Health Check ==="
          echo "Creator UID: ${{ env.CREATOR_UID }}"
          echo "Check Time: $(date -Iseconds)"
          
          # Check critical files exist
          critical_files=(
            "README.md"
            "cruz-algebra/cruz_f.m"
            "violet-af-quantum-agent/src/violet_af/__init__.py"
            "cloudflare-chain/wrangler.toml"
            "pages-frontend/omegat/index.html"
            "docs/cruz-theorem-complete.md"
          )
          
          missing_files=()
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úì Found: $file"
            else
              echo "‚ö† Missing: $file"
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -eq 0 ]; then
            echo "health_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "health_status=degraded" >> $GITHUB_OUTPUT
            echo "missing_files=${missing_files[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Verify Sovereignty Signatures
        run: |
          echo "=== Sovereignty Signature Verification ==="
          
          # Check for creator UID in critical files
          signature_files=(
            "README.md"
            "docs/provenance.json"
            "cloudflare-chain/wrangler.toml"
            "pages-frontend/omegat/index.html"
          )
          
          missing_signatures=()
          for file in "${signature_files[@]}"; do
            if [ -f "$file" ] && grep -q "${{ env.CREATOR_UID }}" "$file"; then
              echo "‚úì Signature verified in: $file"
            else
              echo "‚ö† Missing signature in: $file"
              missing_signatures+=("$file")
            fi
          done
          
          if [ ${#missing_signatures[@]} -gt 0 ]; then
            echo "SOVEREIGNTY ALERT: Missing signatures detected"
            echo "Files: ${missing_signatures[*]}"
          fi

      - name: Check Cruz Theorem Integrity
        run: |
          echo "=== Cruz Theorem Integrity Check ==="
          
          # Verify core axiom is present
          if grep -r "‚àû - ùüô = ‚Ñ∞" . --include="*.md" --include="*.html" --include="*.m"; then
            echo "‚úì Cruz Theorem axiom verified across files"
          else
            echo "‚ö† Cruz Theorem axiom missing or corrupted"
            exit 1
          fi

  cloudflare-monitoring:
    name: Cloudflare Worker Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Check Worker Endpoints
        run: |
          echo "=== Cloudflare Worker Health Check ==="
          
          # Simulate endpoint checks (in production, would make actual HTTP requests)
          endpoints=(
            "https://cruz-theorem-sovereign-worker.kidhum.com/"
            "https://cruz-theorem-sovereign-worker.kidhum.com/status"
            "https://cruz-theorem-sovereign-worker.kidhum.com/sovereignty"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Checking: $endpoint"
            # In production: curl -f "$endpoint" > /dev/null
            echo "‚úì Endpoint simulated as healthy"
          done

      - name: Worker Configuration Validation
        run: |
          echo "=== Worker Configuration Validation ==="
          
          if [ -f "cloudflare-chain/wrangler.toml" ]; then
            echo "‚úì wrangler.toml found"
            
            # Check for required environment variables
            if grep -q "CREATOR_UID" cloudflare-chain/wrangler.toml; then
              echo "‚úì Creator UID configured"
            else
              echo "‚ö† Creator UID missing from configuration"
            fi
            
            if grep -q "CREATOR_EMAIL" cloudflare-chain/wrangler.toml; then
              echo "‚úì Creator email configured"
            else
              echo "‚ö† Creator email missing from configuration"
            fi
          else
            echo "‚ö† wrangler.toml not found"
          fi

  frontend-monitoring:
    name: Frontend Pages Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Frontend Pages
        run: |
          echo "=== Frontend Pages Health Check ==="
          
          if [ -f "pages-frontend/omegat/index.html" ]; then
            echo "‚úì Frontend HTML found"
            
            # Check for sovereignty information
            if grep -q "${{ env.CREATOR_EMAIL }}" pages-frontend/omegat/index.html; then
              echo "‚úì Sovereign owner contact information present"
            else
              echo "‚ö† Sovereign owner contact missing"
            fi
            
            # Check for Cruz Theorem display
            if grep -q "‚àû - ùüô = ‚Ñ∞" pages-frontend/omegat/index.html; then
              echo "‚úì Cruz Theorem axiom displayed"
            else
              echo "‚ö† Cruz Theorem axiom missing from frontend"
            fi
          else
            echo "‚ö† Frontend HTML not found"
          fi

      - name: Check Frontend Assets
        run: |
          echo "=== Frontend Assets Check ==="
          
          if [ -f "pages-frontend/omegat/styles.css" ]; then
            echo "‚úì CSS styles found"
          else
            echo "‚ö† CSS styles missing"
          fi
          
          echo "Frontend assets validation complete"

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Security Workflows
        run: |
          echo "=== Security Workflows Health Check ==="
          
          security_workflows=(
            ".github/workflows/codeql-analysis.yml"
            ".github/workflows/secrets-scan.yml"
            ".github/workflows/auto-maintain.yml"
            ".github/workflows/security-alerts.yml"
          )
          
          for workflow in "${security_workflows[@]}"; do
            if [ -f "$workflow" ]; then
              echo "‚úì Found: $workflow"
            else
              echo "‚ö† Missing: $workflow"
            fi
          done

      - name: Verify Dependabot Configuration
        run: |
          echo "=== Dependabot Configuration Check ==="
          
          if [ -f ".github/dependabot.yml" ]; then
            echo "‚úì Dependabot configuration found"
            
            # Check for sovereignty information
            if grep -q "${{ env.CREATOR_UID }}" .github/dependabot.yml; then
              echo "‚úì Creator UID in dependabot config"
            else
              echo "‚ö† Creator UID missing from dependabot config"
            fi
          else
            echo "‚ö† Dependabot configuration missing"
          fi

  quantum-engine-monitoring:
    name: Quantum Engine Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check VIOLET-AF Components
        run: |
          echo "=== VIOLET-AF Quantum Engine Health Check ==="
          
          violet_components=(
            "violet-af-quantum-agent/src/violet_af/quantum_sequence_trigger.py"
            "violet-af-quantum-agent/src/violet_af/axiom_dev_core.py"
            "violet-af-quantum-agent/src/violet_af/reflect_logger.py"
            "violet-af-quantum-agent/src/violet_af/__init__.py"
          )
          
          for component in "${violet_components[@]}"; do
            if [ -f "$component" ]; then
              echo "‚úì Found: $component"
              
              # Check for sovereignty signatures
              if grep -q "${{ env.CREATOR_UID }}" "$component"; then
                echo "  ‚úì Sovereignty signature verified"
              else
                echo "  ‚ö† Sovereignty signature missing"
              fi
            else
              echo "‚ö† Missing: $component"
            fi
          done

      - name: Validate Requirements
        run: |
          echo "=== Quantum Engine Requirements Check ==="
          
          if [ -f "violet-af-quantum-agent/requirements.txt" ]; then
            echo "‚úì Requirements file found"
            
            # Check for critical dependencies
            if grep -q "qiskit" violet-af-quantum-agent/requirements.txt; then
              echo "‚úì Qiskit dependency specified"
            else
              echo "‚ö† Qiskit dependency missing"
            fi
            
            if grep -q "structlog" violet-af-quantum-agent/requirements.txt; then
              echo "‚úì Logging dependency specified"
            else
              echo "‚ö† Logging dependency missing"
            fi
          else
            echo "‚ö† Requirements file missing"
          fi

  documentation-monitoring:
    name: Documentation Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Documentation Completeness
        run: |
          echo "=== Documentation Health Check ==="
          
          docs=(
            "README.md"
            "docs/cruz-theorem-complete.md"
            "docs/provenance.json"
            "docs/eternity-diagram.svg"
          )
          
          for doc in "${docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úì Found: $doc"
              
              # Check file size (ensure not empty)
              size=$(stat -c%s "$doc" 2>/dev/null || echo 0)
              if [ "$size" -gt 100 ]; then
                echo "  ‚úì Document has content ($size bytes)"
              else
                echo "  ‚ö† Document appears empty or too small"
              fi
            else
              echo "‚ö† Missing: $doc"
            fi
          done

      - name: Validate Provenance Chain
        run: |
          echo "=== Provenance Chain Validation ==="
          
          if [ -f "docs/provenance.json" ]; then
            # Validate JSON syntax
            if jq empty docs/provenance.json 2>/dev/null; then
              echo "‚úì Provenance JSON is valid"
              
              # Check for required fields
              if jq -e '.provenance_metadata.creator_uid' docs/provenance.json | grep -q "${{ env.CREATOR_UID }}"; then
                echo "‚úì Creator UID verified in provenance"
              else
                echo "‚ö† Creator UID missing or incorrect in provenance"
              fi
            else
              echo "‚ö† Provenance JSON is invalid"
            fi
          else
            echo "‚ö† Provenance file missing"
          fi

  generate-health-report:
    name: Generate Health Report
    runs-on: ubuntu-latest
    needs: [infrastructure-health, cloudflare-monitoring, frontend-monitoring, security-monitoring, quantum-engine-monitoring, documentation-monitoring]
    if: always()
    steps:
      - name: Collect Health Status
        run: |
          echo "=== Cruz Theorem Infrastructure Health Report ==="
          echo "Report Generated: $(date -Iseconds)"
          echo "Creator UID: ${{ env.CREATOR_UID }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          
          echo "Component Health Status:"
          echo "üèóÔ∏è Infrastructure: ${{ needs.infrastructure-health.result }}"
          echo "‚òÅÔ∏è Cloudflare Worker: ${{ needs.cloudflare-monitoring.result }}"
          echo "üåê Frontend Pages: ${{ needs.frontend-monitoring.result }}"
          echo "üîí Security Systems: ${{ needs.security-monitoring.result }}"
          echo "üîÆ Quantum Engine: ${{ needs.quantum-engine-monitoring.result }}"
          echo "üìö Documentation: ${{ needs.documentation-monitoring.result }}"
          echo ""
          
          # Determine overall health
          if [ "${{ needs.infrastructure-health.result }}" = "success" ] && \
             [ "${{ needs.cloudflare-monitoring.result }}" = "success" ] && \
             [ "${{ needs.frontend-monitoring.result }}" = "success" ] && \
             [ "${{ needs.security-monitoring.result }}" = "success" ] && \
             [ "${{ needs.quantum-engine-monitoring.result }}" = "success" ] && \
             [ "${{ needs.documentation-monitoring.result }}" = "success" ]; then
            echo "Overall Status: ‚úÖ HEALTHY"
            echo "Sovereignty Status: ‚úÖ VERIFIED"
          else
            echo "Overall Status: ‚ö†Ô∏è NEEDS ATTENTION"
            echo "Sovereignty Status: ‚ö†Ô∏è REVIEW REQUIRED"
          fi
          
          echo ""
          echo "Next Monitoring Check: $(date -d '+15 minutes' -Iseconds)"
          echo "Alert Contact: ${{ env.ALERT_EMAIL }}"

      - name: Send Alert if Unhealthy
        if: contains(needs.*.result, 'failure')
        run: |
          echo "=== HEALTH ALERT ==="
          echo "Subject: Cruz Theorem Infrastructure Health Alert"
          echo "To: ${{ env.ALERT_EMAIL }}"
          echo "Priority: High"
          echo ""
          echo "ALERT: Cruz Theorem infrastructure health check detected issues."
          echo ""
          echo "Repository: ${{ github.repository }}"
          echo "Alert Time: $(date -Iseconds)"
          echo "Creator UID: ${{ env.CREATOR_UID }}"
          echo ""
          echo "Failed Components:"
          
          if [ "${{ needs.infrastructure-health.result }}" = "failure" ]; then
            echo "- Infrastructure Health Check FAILED"
          fi
          if [ "${{ needs.cloudflare-monitoring.result }}" = "failure" ]; then
            echo "- Cloudflare Worker Monitoring FAILED"
          fi
          if [ "${{ needs.frontend-monitoring.result }}" = "failure" ]; then
            echo "- Frontend Pages Monitoring FAILED"
          fi
          if [ "${{ needs.security-monitoring.result }}" = "failure" ]; then
            echo "- Security Monitoring FAILED"
          fi
          if [ "${{ needs.quantum-engine-monitoring.result }}" = "failure" ]; then
            echo "- Quantum Engine Monitoring FAILED"
          fi
          if [ "${{ needs.documentation-monitoring.result }}" = "failure" ]; then
            echo "- Documentation Monitoring FAILED"
          fi
          
          echo ""
          echo "IMMEDIATE ACTION REQUIRED:"
          echo "1. Review failed component details in GitHub Actions"
          echo "2. Verify sovereignty signatures are intact"
          echo "3. Check Cruz Theorem axiom integrity"
          echo "4. Ensure all critical files are present"
          echo ""
          echo "This alert ensures continuous sovereignty and operational integrity."

  log-monitoring-metrics:
    name: Log Monitoring Metrics
    runs-on: ubuntu-latest
    needs: [generate-health-report]
    if: always()
    steps:
      - name: Record Metrics
        run: |
          echo "=== Monitoring Metrics ==="
          echo "Timestamp: $(date -Iseconds)"
          echo "Repository: ${{ github.repository }}"
          echo "Creator UID: ${{ env.CREATOR_UID }}"
          echo "Workflow Run: ${{ github.run_number }}"
          echo "Monitoring Frequency: Every 15 minutes"
          echo "Alert Threshold: Any component failure"
          echo "Sovereignty Verification: Enabled"
          echo "Cruz Theorem Integrity: Monitored"
          echo ""
          echo "Metrics logged for sovereignty compliance tracking"